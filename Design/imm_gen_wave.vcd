$date
	Sat Jun 14 21:04:18 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module imm_gen_tb $end
$var wire 32 ! data_out [31:0] $end
$var parameter 32 " WIDTH $end
$var reg 32 # instr [31:0] $end
$scope module dut $end
$var wire 32 $ instr [31:0] $end
$var wire 7 % opcode [6:0] $end
$var wire 32 & imm_u [31:0] $end
$var wire 32 ' imm_shamt [31:0] $end
$var wire 32 ( imm_s [31:0] $end
$var wire 32 ) imm_j [31:0] $end
$var wire 32 * imm_i [31:0] $end
$var wire 32 + imm_b [31:0] $end
$var wire 3 , func3 [2:0] $end
$var parameter 7 - ALI_OP $end
$var parameter 7 . BR_OP $end
$var parameter 7 / JAL $end
$var parameter 7 0 JALR $end
$var parameter 7 1 LUI $end
$var parameter 7 2 MEM_RD_OP $end
$var parameter 7 3 MEM_WR_OP $end
$var parameter 32 4 WIDTH $end
$var reg 32 5 data_out [31:0] $end
$upscope $end
$scope task check_imm $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 4
b100011 3
b11 2
b110111 1
b1100111 0
b1101111 /
b1100011 .
b10011 -
b100000 "
$end
#0
$dumpvars
b10 5
b0 ,
b100 +
b10 *
b1000000000000010 )
b100 (
b10 '
b1000001000000000000000 &
b10011 %
b1000001000001000010011 $
b1000001000001000010011 #
b10 !
$end
#10000
b11111111111111111111111111100010 !
b11111111111111111111111111100010 5
b11111111111111111111111111100010 *
b11111111111111111111111111111010 (
b11111111111111111111011111111010 +
b11111111111100001000011111100010 )
b11111110001000001000000000000000 &
b11111110001000001000110100010011 #
b11111110001000001000110100010011 $
#20000
b101 !
b101 5
b100011 %
b10 ,
b11 *
b101 (
b100000000100 +
b100010100000000010 )
b1100100010000000000000 &
b11 '
b1100100010001010100011 #
b1100100010001010100011 $
#30000
b11111111111111111111111111111011 !
b11111111111111111111111111111011 5
b11111111111111111111111111100011 *
b11111111111111111111111111111011 (
b11111111111111111111111111111010 +
b11111111111100100010111111100010 )
b11111110001100100010000000000000 &
b11111110001100100010110110100011 #
b11111110001100100010110110100011 $
#40000
b10 !
b10 5
b1100011 %
b0 ,
b110 *
b10 (
b10 +
b101000000000000110 )
b11000101000000000000000 &
b110 '
b11000101000000101100011 #
b11000101000000101100011 $
#50000
b11111111111111111111011111111110 !
b11111111111111111111011111111110 5
b1 ,
b11111111111111111111111111100110 *
b11111111111111111111111111111110 (
b11111111111111111111011111111110 +
b11111111111100101001011111100110 )
b11111110011000101001000000000000 &
b11111110011000101001111101100011 #
b11111110011000101001111101100011 $
#60000
b0 !
b0 5
b1111111 %
b111 ,
b11101111 *
b11101111 (
b100011101110 +
b1111111100011101110 )
b1110111101111111000000000000 &
b1111 '
b1110111101111111011111111111 #
b1110111101111111011111111111 $
#70000
b0 %
b0 ,
b11100000 (
b11100000 +
b10000000100011101110 )
b1110111110000000000000000000 &
b1110111110000000000000000000 #
b1110111110000000000000000000 $
#80000
b10010001101000101000000000000 !
b10010001101000101000000000000 5
b110111 %
b101 ,
b100100011 *
b100100001 (
b100100100000 +
b1000101100100100010 )
b10010001101000101000000000000 &
b11 '
b10010001101000101000010110111 #
b10010001101000101000010110111 $
#90000
b10 !
b10 5
b10011 %
b1 ,
b10 *
b101 (
b100000000100 +
b1001000000000010 )
b1000001001000000000000 &
b10 '
b1000001001001010010011 #
b1000001001001010010011 $
#100000
